{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "a5e786b6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-28T21:23:15.175454Z",
     "iopub.status.busy": "2025-03-28T21:23:15.175193Z",
     "iopub.status.idle": "2025-03-28T21:23:43.869043Z",
     "shell.execute_reply": "2025-03-28T21:23:43.868132Z"
    },
    "id": "XSj2NqrYugM8",
    "papermill": {
     "duration": 28.701424,
     "end_time": "2025-03-28T21:23:43.870910",
     "exception": false,
     "start_time": "2025-03-28T21:23:15.169486",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import tensorflow as tf\n",
    "import cv2\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "from tensorflow.keras.models import Sequential\n",
    "from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout\n",
    "from tensorflow.keras.preprocessing.image import ImageDataGenerator\n",
    "from tensorflow.keras.applications import EfficientNetB0\n",
    "from tensorflow.keras.models import Model\n",
    "from tensorflow.keras.optimizers import Adam\n",
    "import shap\n",
    "import os"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "5625243e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-28T21:23:43.881082Z",
     "iopub.status.busy": "2025-03-28T21:23:43.880550Z",
     "iopub.status.idle": "2025-03-28T21:23:43.884466Z",
     "shell.execute_reply": "2025-03-28T21:23:43.883773Z"
    },
    "papermill": {
     "duration": 0.010031,
     "end_time": "2025-03-28T21:23:43.885776",
     "exception": false,
     "start_time": "2025-03-28T21:23:43.875745",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Kaggle Dataset Path\n",
    "dataset_path = \"/kaggle/input/skin-cancer-mnist-ham10000\"\n",
    "metadata_path = os.path.join(dataset_path, \"HAM10000_metadata.csv\")\n",
    "img_dir_1 = os.path.join(dataset_path, \"HAM10000_images_part_1\")\n",
    "img_dir_2 = os.path.join(dataset_path, \"HAM10000_images_part_2\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "0627291f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-28T21:23:43.894672Z",
     "iopub.status.busy": "2025-03-28T21:23:43.894455Z",
     "iopub.status.idle": "2025-03-28T21:24:02.414770Z",
     "shell.execute_reply": "2025-03-28T21:24:02.413955Z"
    },
    "papermill": {
     "duration": 18.526118,
     "end_time": "2025-03-28T21:24:02.416054",
     "exception": false,
     "start_time": "2025-03-28T21:23:43.889936",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Found 8012 validated image filenames belonging to 7 classes.\n",
      "Found 2003 validated image filenames belonging to 7 classes.\n"
     ]
    }
   ],
   "source": [
    "# Load metadata\n",
    "# Load metadata\n",
    "metadata = pd.read_csv(metadata_path)\n",
    "def get_image_path(image_id):\n",
    "    path1 = os.path.join(img_dir_1, image_id + \".jpg\")\n",
    "    path2 = os.path.join(img_dir_2, image_id + \".jpg\")\n",
    "    return path1 if os.path.exists(path1) else path2 if os.path.exists(path2) else None\n",
    "\n",
    "metadata['image_path'] = metadata['image_id'].apply(get_image_path)\n",
    "metadata = metadata.dropna(subset=['image_path'])  # Remove invalid paths\n",
    "\n",
    "IMG_SIZE = (224, 224)\n",
    "BATCH_SIZE = 32\n",
    "\n",
    "datagen = ImageDataGenerator(\n",
    "    rescale=1./255, validation_split=0.2\n",
    ")\n",
    "\n",
    "train_generator = datagen.flow_from_dataframe(\n",
    "    metadata,\n",
    "    x_col='image_path',\n",
    "    y_col='dx',\n",
    "    target_size=IMG_SIZE,\n",
    "    batch_size=BATCH_SIZE,\n",
    "    class_mode='categorical',\n",
    "    subset='training'\n",
    ")\n",
    "\n",
    "val_generator = datagen.flow_from_dataframe(\n",
    "    metadata,\n",
    "    x_col='image_path',\n",
    "    y_col='dx',\n",
    "    target_size=IMG_SIZE,\n",
    "    batch_size=BATCH_SIZE,\n",
    "    class_mode='categorical',\n",
    "    subset='validation'\n",
    ")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "93d9beed",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-28T21:24:02.426055Z",
     "iopub.status.busy": "2025-03-28T21:24:02.425799Z",
     "iopub.status.idle": "2025-03-28T21:24:06.537614Z",
     "shell.execute_reply": "2025-03-28T21:24:06.536947Z"
    },
    "papermill": {
     "duration": 4.118371,
     "end_time": "2025-03-28T21:24:06.539212",
     "exception": false,
     "start_time": "2025-03-28T21:24:02.420841",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Downloading data from https://storage.googleapis.com/keras-applications/efficientnetb0_notop.h5\n",
      "\u001b[1m16705208/16705208\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 0us/step\n"
     ]
    }
   ],
   "source": [
    "# Model Architecture\n",
    "base_model = EfficientNetB0(weights='imagenet', include_top=False, input_shape=(224, 224, 3))\n",
    "base_model.trainable = False\n",
    "\n",
    "x = Flatten()(base_model.output)\n",
    "x = Dense(512, activation='relu')(x)\n",
    "x = Dropout(0.5)(x)\n",
    "num_classes = len(train_generator.class_indices)\n",
    "out = Dense(num_classes, activation='softmax')(x)\n",
    "\n",
    "model = Model(inputs=base_model.input, outputs=out)\n",
    "model.compile(optimizer=Adam(learning_rate=0.0001), loss='categorical_crossentropy', metrics=['accuracy'])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "88cb5bec",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-28T21:24:06.549398Z",
     "iopub.status.busy": "2025-03-28T21:24:06.549177Z",
     "iopub.status.idle": "2025-03-28T21:36:40.962798Z",
     "shell.execute_reply": "2025-03-28T21:36:40.961895Z"
    },
    "papermill": {
     "duration": 754.533998,
     "end_time": "2025-03-28T21:36:41.078177",
     "exception": false,
     "start_time": "2025-03-28T21:24:06.544179",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/10\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Your `PyDataset` class should call `super().__init__(**kwargs)` in its constructor. `**kwargs` can include `workers`, `use_multiprocessing`, `max_queue_size`. Do not pass these arguments to `fit()`, as they will be ignored.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m251/251\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m156s\u001b[0m 520ms/step - accuracy: 0.7942 - loss: 1.1143 - val_accuracy: 9.9850e-04 - val_loss: 7.0230\n",
      "Epoch 2/10\n",
      "\u001b[1m251/251\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m67s\u001b[0m 259ms/step - accuracy: 0.8380 - loss: 0.7679 - val_accuracy: 9.9850e-04 - val_loss: 7.0376\n",
      "Epoch 3/10\n",
      "\u001b[1m251/251\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m67s\u001b[0m 259ms/step - accuracy: 0.8357 - loss: 0.7483 - val_accuracy: 9.9850e-04 - val_loss: 6.4381\n",
      "Epoch 4/10\n",
      "\u001b[1m251/251\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m66s\u001b[0m 256ms/step - accuracy: 0.8418 - loss: 0.7430 - val_accuracy: 9.9850e-04 - val_loss: 6.2278\n",
      "Epoch 5/10\n",
      "\u001b[1m251/251\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m67s\u001b[0m 262ms/step - accuracy: 0.8431 - loss: 0.7225 - val_accuracy: 9.9850e-04 - val_loss: 5.8513\n",
      "Epoch 6/10\n",
      "\u001b[1m251/251\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m66s\u001b[0m 256ms/step - accuracy: 0.8411 - loss: 0.7334 - val_accuracy: 9.9850e-04 - val_loss: 6.1034\n",
      "Epoch 7/10\n",
      "\u001b[1m251/251\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m66s\u001b[0m 257ms/step - accuracy: 0.8354 - loss: 0.7554 - val_accuracy: 9.9850e-04 - val_loss: 7.3846\n",
      "Epoch 8/10\n",
      "\u001b[1m251/251\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m66s\u001b[0m 258ms/step - accuracy: 0.8390 - loss: 0.7438 - val_accuracy: 9.9850e-04 - val_loss: 7.0811\n",
      "Epoch 9/10\n",
      "\u001b[1m251/251\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m66s\u001b[0m 257ms/step - accuracy: 0.8351 - loss: 0.7513 - val_accuracy: 9.9850e-04 - val_loss: 6.7889\n",
      "Epoch 10/10\n",
      "\u001b[1m251/251\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m66s\u001b[0m 258ms/step - accuracy: 0.8373 - loss: 0.7374 - val_accuracy: 9.9850e-04 - val_loss: 6.8861\n"
     ]
    }
   ],
   "source": [
    "# Model Training\n",
    "EPOCHS = 10\n",
    "history = model.fit(train_generator, validation_data=val_generator, epochs=EPOCHS)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "257179b1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-28T21:36:41.315652Z",
     "iopub.status.busy": "2025-03-28T21:36:41.315319Z",
     "iopub.status.idle": "2025-03-28T21:36:41.603795Z",
     "shell.execute_reply": "2025-03-28T21:36:41.602949Z"
    },
    "papermill": {
     "duration": 0.409902,
     "end_time": "2025-03-28T21:36:41.605096",
     "exception": false,
     "start_time": "2025-03-28T21:36:41.195194",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Plot Training and Validation Accuracy\n",
    "plt.figure(figsize=(10, 6))\n",
    "plt.plot(history.history['accuracy'], label='Training Accuracy')\n",
    "plt.plot(history.history['val_accuracy'], label='Validation Accuracy')\n",
    "plt.title('Training and Validation Accuracy over Epochs')\n",
    "plt.xlabel('Epochs')\n",
    "plt.ylabel('Accuracy')\n",
    "plt.legend()\n",
    "plt.grid(True)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "3cb67b91",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-28T21:36:41.844292Z",
     "iopub.status.busy": "2025-03-28T21:36:41.843996Z",
     "iopub.status.idle": "2025-03-28T21:36:41.848787Z",
     "shell.execute_reply": "2025-03-28T21:36:41.848123Z"
    },
    "papermill": {
     "duration": 0.125024,
     "end_time": "2025-03-28T21:36:41.849872",
     "exception": false,
     "start_time": "2025-03-28T21:36:41.724848",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Explainability with Grad-CAM\n",
    "def grad_cam(model, img_array, layer_name='top_conv'):\n",
    "    grad_model = Model(inputs=model.input, outputs=[model.get_layer(layer_name).output, model.output])\n",
    "    with tf.GradientTape() as tape:\n",
    "        conv_outputs, predictions = grad_model(img_array)\n",
    "        loss = predictions[:, np.argmax(predictions[0])]\n",
    "    grads = tape.gradient(loss, conv_outputs)\n",
    "    pooled_grads = tf.reduce_mean(grads, axis=(0, 1, 2))\n",
    "    heatmap = tf.reduce_mean(tf.multiply(pooled_grads, conv_outputs), axis=-1)\n",
    "    heatmap = np.maximum(heatmap, 0) / np.max(heatmap)\n",
    "    return heatmap"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "b0673d07",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-28T21:36:42.086002Z",
     "iopub.status.busy": "2025-03-28T21:36:42.085681Z",
     "iopub.status.idle": "2025-03-28T21:36:42.123913Z",
     "shell.execute_reply": "2025-03-28T21:36:42.123183Z"
    },
    "id": "GsoKfCExugPy",
    "outputId": "a45379e7-7ecc-45ed-f3d2-b9bad863f4e7",
    "papermill": {
     "duration": 0.158046,
     "end_time": "2025-03-28T21:36:42.125203",
     "exception": false,
     "start_time": "2025-03-28T21:36:41.967157",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>lesion_id</th>\n",
       "      <th>image_id</th>\n",
       "      <th>dx</th>\n",
       "      <th>dx_type</th>\n",
       "      <th>age</th>\n",
       "      <th>sex</th>\n",
       "      <th>localization</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>HAM_0000118</td>\n",
       "      <td>ISIC_0027419</td>\n",
       "      <td>bkl</td>\n",
       "      <td>histo</td>\n",
       "      <td>80.0</td>\n",
       "      <td>male</td>\n",
       "      <td>scalp</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>HAM_0000118</td>\n",
       "      <td>ISIC_0025030</td>\n",
       "      <td>bkl</td>\n",
       "      <td>histo</td>\n",
       "      <td>80.0</td>\n",
       "      <td>male</td>\n",
       "      <td>scalp</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>HAM_0002730</td>\n",
       "      <td>ISIC_0026769</td>\n",
       "      <td>bkl</td>\n",
       "      <td>histo</td>\n",
       "      <td>80.0</td>\n",
       "      <td>male</td>\n",
       "      <td>scalp</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>HAM_0002730</td>\n",
       "      <td>ISIC_0025661</td>\n",
       "      <td>bkl</td>\n",
       "      <td>histo</td>\n",
       "      <td>80.0</td>\n",
       "      <td>male</td>\n",
       "      <td>scalp</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>HAM_0001466</td>\n",
       "      <td>ISIC_0031633</td>\n",
       "      <td>bkl</td>\n",
       "      <td>histo</td>\n",
       "      <td>75.0</td>\n",
       "      <td>male</td>\n",
       "      <td>ear</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>HAM_0001466</td>\n",
       "      <td>ISIC_0027850</td>\n",
       "      <td>bkl</td>\n",
       "      <td>histo</td>\n",
       "      <td>75.0</td>\n",
       "      <td>male</td>\n",
       "      <td>ear</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>HAM_0002761</td>\n",
       "      <td>ISIC_0029176</td>\n",
       "      <td>bkl</td>\n",
       "      <td>histo</td>\n",
       "      <td>60.0</td>\n",
       "      <td>male</td>\n",
       "      <td>face</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>HAM_0002761</td>\n",
       "      <td>ISIC_0029068</td>\n",
       "      <td>bkl</td>\n",
       "      <td>histo</td>\n",
       "      <td>60.0</td>\n",
       "      <td>male</td>\n",
       "      <td>face</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>HAM_0005132</td>\n",
       "      <td>ISIC_0025837</td>\n",
       "      <td>bkl</td>\n",
       "      <td>histo</td>\n",
       "      <td>70.0</td>\n",
       "      <td>female</td>\n",
       "      <td>back</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>HAM_0005132</td>\n",
       "      <td>ISIC_0025209</td>\n",
       "      <td>bkl</td>\n",
       "      <td>histo</td>\n",
       "      <td>70.0</td>\n",
       "      <td>female</td>\n",
       "      <td>back</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     lesion_id      image_id   dx dx_type   age     sex localization\n",
       "0  HAM_0000118  ISIC_0027419  bkl   histo  80.0    male        scalp\n",
       "1  HAM_0000118  ISIC_0025030  bkl   histo  80.0    male        scalp\n",
       "2  HAM_0002730  ISIC_0026769  bkl   histo  80.0    male        scalp\n",
       "3  HAM_0002730  ISIC_0025661  bkl   histo  80.0    male        scalp\n",
       "4  HAM_0001466  ISIC_0031633  bkl   histo  75.0    male          ear\n",
       "5  HAM_0001466  ISIC_0027850  bkl   histo  75.0    male          ear\n",
       "6  HAM_0002761  ISIC_0029176  bkl   histo  60.0    male         face\n",
       "7  HAM_0002761  ISIC_0029068  bkl   histo  60.0    male         face\n",
       "8  HAM_0005132  ISIC_0025837  bkl   histo  70.0  female         back\n",
       "9  HAM_0005132  ISIC_0025209  bkl   histo  70.0  female         back"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tabular_data = pd.read_csv(\"/kaggle/input/skin-cancer-mnist-ham10000/HAM10000_metadata.csv\")\n",
    "tabular_data.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "355f064d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-28T21:36:42.408310Z",
     "iopub.status.busy": "2025-03-28T21:36:42.408013Z",
     "iopub.status.idle": "2025-03-28T21:36:42.424678Z",
     "shell.execute_reply": "2025-03-28T21:36:42.424030Z"
    },
    "id": "FI0Fa2O11GkC",
    "papermill": {
     "duration": 0.137637,
     "end_time": "2025-03-28T21:36:42.425915",
     "exception": false,
     "start_time": "2025-03-28T21:36:42.288278",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import tensorflow as tf\n",
    "from tensorflow.keras.models import Sequential\n",
    "from tensorflow.keras.layers import Dense, Conv2D, Flatten, MaxPooling2D, Dropout\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.preprocessing import LabelEncoder\n",
    "from tensorflow.keras.utils import to_categorical"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "f3a8bf3b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-28T21:36:42.662932Z",
     "iopub.status.busy": "2025-03-28T21:36:42.662611Z",
     "iopub.status.idle": "2025-03-28T21:36:45.335019Z",
     "shell.execute_reply": "2025-03-28T21:36:45.334080Z"
    },
    "id": "6p5ubALvugf7",
    "outputId": "3ed98e14-618c-4291-9f0c-cd6d25a49378",
    "papermill": {
     "duration": 2.791307,
     "end_time": "2025-03-28T21:36:45.336344",
     "exception": false,
     "start_time": "2025-03-28T21:36:42.545037",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>pixel0000</th>\n",
       "      <th>pixel0001</th>\n",
       "      <th>pixel0002</th>\n",
       "      <th>pixel0003</th>\n",
       "      <th>pixel0004</th>\n",
       "      <th>pixel0005</th>\n",
       "      <th>pixel0006</th>\n",
       "      <th>pixel0007</th>\n",
       "      <th>pixel0008</th>\n",
       "      <th>pixel0009</th>\n",
       "      <th>...</th>\n",
       "      <th>pixel2343</th>\n",
       "      <th>pixel2344</th>\n",
       "      <th>pixel2345</th>\n",
       "      <th>pixel2346</th>\n",
       "      <th>pixel2347</th>\n",
       "      <th>pixel2348</th>\n",
       "      <th>pixel2349</th>\n",
       "      <th>pixel2350</th>\n",
       "      <th>pixel2351</th>\n",
       "      <th>label</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>192</td>\n",
       "      <td>153</td>\n",
       "      <td>193</td>\n",
       "      <td>195</td>\n",
       "      <td>155</td>\n",
       "      <td>192</td>\n",
       "      <td>197</td>\n",
       "      <td>154</td>\n",
       "      <td>185</td>\n",
       "      <td>202</td>\n",
       "      <td>...</td>\n",
       "      <td>173</td>\n",
       "      <td>124</td>\n",
       "      <td>138</td>\n",
       "      <td>183</td>\n",
       "      <td>147</td>\n",
       "      <td>166</td>\n",
       "      <td>185</td>\n",
       "      <td>154</td>\n",
       "      <td>177</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>25</td>\n",
       "      <td>14</td>\n",
       "      <td>30</td>\n",
       "      <td>68</td>\n",
       "      <td>48</td>\n",
       "      <td>75</td>\n",
       "      <td>123</td>\n",
       "      <td>93</td>\n",
       "      <td>126</td>\n",
       "      <td>158</td>\n",
       "      <td>...</td>\n",
       "      <td>60</td>\n",
       "      <td>39</td>\n",
       "      <td>55</td>\n",
       "      <td>25</td>\n",
       "      <td>14</td>\n",
       "      <td>28</td>\n",
       "      <td>25</td>\n",
       "      <td>14</td>\n",
       "      <td>27</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>192</td>\n",
       "      <td>138</td>\n",
       "      <td>153</td>\n",
       "      <td>200</td>\n",
       "      <td>145</td>\n",
       "      <td>163</td>\n",
       "      <td>201</td>\n",
       "      <td>142</td>\n",
       "      <td>160</td>\n",
       "      <td>206</td>\n",
       "      <td>...</td>\n",
       "      <td>167</td>\n",
       "      <td>129</td>\n",
       "      <td>143</td>\n",
       "      <td>159</td>\n",
       "      <td>124</td>\n",
       "      <td>142</td>\n",
       "      <td>136</td>\n",
       "      <td>104</td>\n",
       "      <td>117</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>38</td>\n",
       "      <td>19</td>\n",
       "      <td>30</td>\n",
       "      <td>95</td>\n",
       "      <td>59</td>\n",
       "      <td>72</td>\n",
       "      <td>143</td>\n",
       "      <td>103</td>\n",
       "      <td>119</td>\n",
       "      <td>171</td>\n",
       "      <td>...</td>\n",
       "      <td>44</td>\n",
       "      <td>26</td>\n",
       "      <td>36</td>\n",
       "      <td>25</td>\n",
       "      <td>12</td>\n",
       "      <td>17</td>\n",
       "      <td>25</td>\n",
       "      <td>12</td>\n",
       "      <td>15</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>158</td>\n",
       "      <td>113</td>\n",
       "      <td>139</td>\n",
       "      <td>194</td>\n",
       "      <td>144</td>\n",
       "      <td>174</td>\n",
       "      <td>215</td>\n",
       "      <td>162</td>\n",
       "      <td>191</td>\n",
       "      <td>225</td>\n",
       "      <td>...</td>\n",
       "      <td>209</td>\n",
       "      <td>166</td>\n",
       "      <td>185</td>\n",
       "      <td>172</td>\n",
       "      <td>135</td>\n",
       "      <td>149</td>\n",
       "      <td>109</td>\n",
       "      <td>78</td>\n",
       "      <td>92</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 2353 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   pixel0000  pixel0001  pixel0002  pixel0003  pixel0004  pixel0005  \\\n",
       "0        192        153        193        195        155        192   \n",
       "1         25         14         30         68         48         75   \n",
       "2        192        138        153        200        145        163   \n",
       "3         38         19         30         95         59         72   \n",
       "4        158        113        139        194        144        174   \n",
       "\n",
       "   pixel0006  pixel0007  pixel0008  pixel0009  ...  pixel2343  pixel2344  \\\n",
       "0        197        154        185        202  ...        173        124   \n",
       "1        123         93        126        158  ...         60         39   \n",
       "2        201        142        160        206  ...        167        129   \n",
       "3        143        103        119        171  ...         44         26   \n",
       "4        215        162        191        225  ...        209        166   \n",
       "\n",
       "   pixel2345  pixel2346  pixel2347  pixel2348  pixel2349  pixel2350  \\\n",
       "0        138        183        147        166        185        154   \n",
       "1         55         25         14         28         25         14   \n",
       "2        143        159        124        142        136        104   \n",
       "3         36         25         12         17         25         12   \n",
       "4        185        172        135        149        109         78   \n",
       "\n",
       "   pixel2351  label  \n",
       "0        177      2  \n",
       "1         27      2  \n",
       "2        117      2  \n",
       "3         15      2  \n",
       "4         92      2  \n",
       "\n",
       "[5 rows x 2353 columns]"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data = pd.read_csv('/kaggle/input/skin-cancer-mnist-ham10000/hmnist_28_28_RGB.csv')\n",
    "data.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "87809d3a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-28T21:36:45.578323Z",
     "iopub.status.busy": "2025-03-28T21:36:45.578024Z",
     "iopub.status.idle": "2025-03-28T21:36:45.636786Z",
     "shell.execute_reply": "2025-03-28T21:36:45.636098Z"
    },
    "id": "xpDJjW051GsK",
    "papermill": {
     "duration": 0.178931,
     "end_time": "2025-03-28T21:36:45.638366",
     "exception": false,
     "start_time": "2025-03-28T21:36:45.459435",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Separate features (pixels) and labels\n",
    "X = data.drop(columns=['label']).values\n",
    "y = data['label'].values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "9f4dd998",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-28T21:36:45.874920Z",
     "iopub.status.busy": "2025-03-28T21:36:45.874606Z",
     "iopub.status.idle": "2025-03-28T21:36:47.120238Z",
     "shell.execute_reply": "2025-03-28T21:36:47.119380Z"
    },
    "id": "wE6UB3__1OZK",
    "outputId": "e40b1819-d3a4-4513-e89e-144da56fec54",
    "papermill": {
     "duration": 1.364646,
     "end_time": "2025-03-28T21:36:47.121513",
     "exception": false,
     "start_time": "2025-03-28T21:36:45.756867",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Shape of X after oversampling: (46935, 28, 28, 3)\n"
     ]
    }
   ],
   "source": [
    "from imblearn.over_sampling import RandomOverSampler\n",
    "\n",
    "# Oversampling to Overcome Class Imbalance\n",
    "oversample = RandomOverSampler()\n",
    "X, y = oversample.fit_resample(X, y)\n",
    "X = np.array(X).reshape(-1, 28, 28, 3)\n",
    "print('Shape of X after oversampling:', X.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "fa8b3193",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-28T21:36:47.361723Z",
     "iopub.status.busy": "2025-03-28T21:36:47.360971Z",
     "iopub.status.idle": "2025-03-28T21:36:48.554403Z",
     "shell.execute_reply": "2025-03-28T21:36:48.553658Z"
    },
    "id": "r8SBVw4d1Gu7",
    "papermill": {
     "duration": 1.314154,
     "end_time": "2025-03-28T21:36:48.556005",
     "exception": false,
     "start_time": "2025-03-28T21:36:47.241851",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Standardizing Data\n",
    "X = (X - np.mean(X)) / np.std(X)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "56d8ad7a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-28T21:36:48.795020Z",
     "iopub.status.busy": "2025-03-28T21:36:48.794675Z",
     "iopub.status.idle": "2025-03-28T21:36:49.057427Z",
     "shell.execute_reply": "2025-03-28T21:36:49.056511Z"
    },
    "id": "xMwJ0_St1Gxq",
    "outputId": "881e6285-9287-4bac-8da2-7a9b9ec4b48c",
    "papermill": {
     "duration": 0.382706,
     "end_time": "2025-03-28T21:36:49.058782",
     "exception": false,
     "start_time": "2025-03-28T21:36:48.676076",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training set size: (37548, 28, 28, 3), Testing set size: (9387, 28, 28, 3)\n"
     ]
    }
   ],
   "source": [
    "# Splitting Data into Training and Testing Sets\n",
    "X_train, X_test, Y_train, Y_test = train_test_split(X, y, test_size=0.2, random_state=1)\n",
    "print(f'Training set size: {X_train.shape}, Testing set size: {X_test.shape}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "e43082af",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-28T21:36:49.310388Z",
     "iopub.status.busy": "2025-03-28T21:36:49.310052Z",
     "iopub.status.idle": "2025-03-28T21:36:49.376610Z",
     "shell.execute_reply": "2025-03-28T21:36:49.375718Z"
    },
    "id": "31YuzUVT2L2j",
    "papermill": {
     "duration": 0.200197,
     "end_time": "2025-03-28T21:36:49.378109",
     "exception": false,
     "start_time": "2025-03-28T21:36:49.177912",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from tensorflow.keras.layers import Input\n",
    "from tensorflow.keras.layers import Conv2D, MaxPool2D, Flatten, Dense\n",
    "from tensorflow.keras.models import Sequential\n",
    "# Building the CNN Model\n",
    "model = Sequential([\n",
    "    Input(shape=(28, 28, 3)),           # Input layer defining the shape\n",
    "    Conv2D(16, kernel_size=(3, 3), activation='relu', padding='same'),\n",
    "    Conv2D(32, kernel_size=(3, 3), activation='relu'),\n",
    "    MaxPool2D(pool_size=(2, 2)),\n",
    "    Conv2D(32, kernel_size=(3, 3), activation='relu', padding='same'),\n",
    "    Conv2D(64, kernel_size=(3, 3), activation='relu'),\n",
    "    MaxPool2D(pool_size=(2, 2), padding='same'),\n",
    "    Flatten(),\n",
    "    Dense(64, activation='relu'),\n",
    "    Dense(32, activation='relu'),\n",
    "    Dense(7, activation='softmax')\n",
    "])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "f26e4771",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-28T21:36:49.653481Z",
     "iopub.status.busy": "2025-03-28T21:36:49.653186Z",
     "iopub.status.idle": "2025-03-28T21:36:49.671670Z",
     "shell.execute_reply": "2025-03-28T21:36:49.670770Z"
    },
    "id": "BfgXJFrD3kPr",
    "outputId": "c1f82f05-12d7-4e51-8dcc-54746b3239a4",
    "papermill": {
     "duration": 0.136948,
     "end_time": "2025-03-28T21:36:49.673067",
     "exception": false,
     "start_time": "2025-03-28T21:36:49.536119",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"sequential\"</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1mModel: \"sequential\"\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━┓\n",
       "┃<span style=\"font-weight: bold\"> Layer (type)                         </span>┃<span style=\"font-weight: bold\"> Output Shape                </span>┃<span style=\"font-weight: bold\">         Param # </span>┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━┩\n",
       "│ conv2d (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)                      │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">28</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">28</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">16</span>)          │             <span style=\"color: #00af00; text-decoration-color: #00af00\">448</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ conv2d_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)                    │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">26</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">26</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)          │           <span style=\"color: #00af00; text-decoration-color: #00af00\">4,640</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ max_pooling2d (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">MaxPooling2D</span>)         │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">13</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">13</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)          │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ conv2d_2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)                    │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">13</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">13</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)          │           <span style=\"color: #00af00; text-decoration-color: #00af00\">9,248</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ conv2d_3 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)                    │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">11</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">11</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)          │          <span style=\"color: #00af00; text-decoration-color: #00af00\">18,496</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ max_pooling2d_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">MaxPooling2D</span>)       │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">6</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">6</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)            │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ flatten_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Flatten</span>)                  │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2304</span>)                │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dense_2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                      │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)                  │         <span style=\"color: #00af00; text-decoration-color: #00af00\">147,520</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dense_3 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                      │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)                  │           <span style=\"color: #00af00; text-decoration-color: #00af00\">2,080</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dense_4 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                      │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">7</span>)                   │             <span style=\"color: #00af00; text-decoration-color: #00af00\">231</span> │\n",
       "└──────────────────────────────────────┴─────────────────────────────┴─────────────────┘\n",
       "</pre>\n"
      ],
      "text/plain": [
       "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━┓\n",
       "┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                        \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape               \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m        Param #\u001b[0m\u001b[1m \u001b[0m┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━┩\n",
       "│ conv2d (\u001b[38;5;33mConv2D\u001b[0m)                      │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m28\u001b[0m, \u001b[38;5;34m28\u001b[0m, \u001b[38;5;34m16\u001b[0m)          │             \u001b[38;5;34m448\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ conv2d_1 (\u001b[38;5;33mConv2D\u001b[0m)                    │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m26\u001b[0m, \u001b[38;5;34m26\u001b[0m, \u001b[38;5;34m32\u001b[0m)          │           \u001b[38;5;34m4,640\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ max_pooling2d (\u001b[38;5;33mMaxPooling2D\u001b[0m)         │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m13\u001b[0m, \u001b[38;5;34m13\u001b[0m, \u001b[38;5;34m32\u001b[0m)          │               \u001b[38;5;34m0\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ conv2d_2 (\u001b[38;5;33mConv2D\u001b[0m)                    │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m13\u001b[0m, \u001b[38;5;34m13\u001b[0m, \u001b[38;5;34m32\u001b[0m)          │           \u001b[38;5;34m9,248\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ conv2d_3 (\u001b[38;5;33mConv2D\u001b[0m)                    │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m11\u001b[0m, \u001b[38;5;34m11\u001b[0m, \u001b[38;5;34m64\u001b[0m)          │          \u001b[38;5;34m18,496\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ max_pooling2d_1 (\u001b[38;5;33mMaxPooling2D\u001b[0m)       │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m6\u001b[0m, \u001b[38;5;34m6\u001b[0m, \u001b[38;5;34m64\u001b[0m)            │               \u001b[38;5;34m0\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ flatten_1 (\u001b[38;5;33mFlatten\u001b[0m)                  │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m2304\u001b[0m)                │               \u001b[38;5;34m0\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dense_2 (\u001b[38;5;33mDense\u001b[0m)                      │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m64\u001b[0m)                  │         \u001b[38;5;34m147,520\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dense_3 (\u001b[38;5;33mDense\u001b[0m)                      │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m32\u001b[0m)                  │           \u001b[38;5;34m2,080\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dense_4 (\u001b[38;5;33mDense\u001b[0m)                      │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m7\u001b[0m)                   │             \u001b[38;5;34m231\u001b[0m │\n",
       "└──────────────────────────────────────┴─────────────────────────────┴─────────────────┘\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">182,663</span> (713.53 KB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Total params: \u001b[0m\u001b[38;5;34m182,663\u001b[0m (713.53 KB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">182,663</span> (713.53 KB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m182,663\u001b[0m (713.53 KB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m0\u001b[0m (0.00 B)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "model.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "a292b53f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-28T21:36:49.909047Z",
     "iopub.status.busy": "2025-03-28T21:36:49.908707Z",
     "iopub.status.idle": "2025-03-28T21:36:49.912178Z",
     "shell.execute_reply": "2025-03-28T21:36:49.911551Z"
    },
    "id": "Trpj-Tbr2L7T",
    "papermill": {
     "duration": 0.123199,
     "end_time": "2025-03-28T21:36:49.913447",
     "exception": false,
     "start_time": "2025-03-28T21:36:49.790248",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "callback = tf.keras.callbacks.ModelCheckpoint(\n",
    "    filepath='best_model.keras',  # changed to `.keras` extension\n",
    "    monitor='val_accuracy',       # monitoring validation accuracy\n",
    "    mode='max',\n",
    "    save_best_only=True,\n",
    "    verbose=1\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "e85d165c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-28T21:36:50.151362Z",
     "iopub.status.busy": "2025-03-28T21:36:50.151065Z",
     "iopub.status.idle": "2025-03-28T21:36:50.159211Z",
     "shell.execute_reply": "2025-03-28T21:36:50.158280Z"
    },
    "id": "1NEDt9gt2L-E",
    "papermill": {
     "duration": 0.12917,
     "end_time": "2025-03-28T21:36:50.160511",
     "exception": false,
     "start_time": "2025-03-28T21:36:50.031341",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Compiling the Model\n",
    "model.compile(\n",
    "    loss='sparse_categorical_crossentropy',\n",
    "    optimizer='adam',\n",
    "    metrics=['accuracy']\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "ad811649",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-28T21:36:50.398552Z",
     "iopub.status.busy": "2025-03-28T21:36:50.398237Z",
     "iopub.status.idle": "2025-03-28T21:37:25.939147Z",
     "shell.execute_reply": "2025-03-28T21:37:25.938205Z"
    },
    "id": "BH-oyi2L2MA8",
    "outputId": "fcf26b48-3a93-4848-a7e9-c4071bfc4547",
    "papermill": {
     "duration": 35.661853,
     "end_time": "2025-03-28T21:37:25.940549",
     "exception": false,
     "start_time": "2025-03-28T21:36:50.278696",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/20\n",
      "\u001b[1m235/235\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 12ms/step - accuracy: 0.4074 - loss: 1.4915\n",
      "Epoch 1: val_accuracy improved from -inf to 0.63316, saving model to best_model.keras\n",
      "\u001b[1m235/235\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 19ms/step - accuracy: 0.4079 - loss: 1.4904 - val_accuracy: 0.6332 - val_loss: 0.9174\n",
      "Epoch 2/20\n",
      "\u001b[1m232/235\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - accuracy: 0.7108 - loss: 0.7784\n",
      "Epoch 2: val_accuracy improved from 0.63316 to 0.76005, saving model to best_model.keras\n",
      "\u001b[1m235/235\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step - accuracy: 0.7113 - loss: 0.7770 - val_accuracy: 0.7601 - val_loss: 0.6243\n",
      "Epoch 3/20\n",
      "\u001b[1m231/235\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - accuracy: 0.8116 - loss: 0.5086\n",
      "Epoch 3: val_accuracy improved from 0.76005 to 0.86565, saving model to best_model.keras\n",
      "\u001b[1m235/235\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step - accuracy: 0.8121 - loss: 0.5075 - val_accuracy: 0.8656 - val_loss: 0.3662\n",
      "Epoch 4/20\n",
      "\u001b[1m232/235\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - accuracy: 0.8839 - loss: 0.3256\n",
      "Epoch 4: val_accuracy improved from 0.86565 to 0.90027, saving model to best_model.keras\n",
      "\u001b[1m235/235\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step - accuracy: 0.8839 - loss: 0.3254 - val_accuracy: 0.9003 - val_loss: 0.2852\n",
      "Epoch 5/20\n",
      "\u001b[1m232/235\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - accuracy: 0.9222 - loss: 0.2236\n",
      "Epoch 5: val_accuracy improved from 0.90027 to 0.91798, saving model to best_model.keras\n",
      "\u001b[1m235/235\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step - accuracy: 0.9222 - loss: 0.2235 - val_accuracy: 0.9180 - val_loss: 0.2268\n",
      "Epoch 6/20\n",
      "\u001b[1m232/235\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - accuracy: 0.9388 - loss: 0.1706\n",
      "Epoch 6: val_accuracy did not improve from 0.91798\n",
      "\u001b[1m235/235\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step - accuracy: 0.9389 - loss: 0.1705 - val_accuracy: 0.9168 - val_loss: 0.2110\n",
      "Epoch 7/20\n",
      "\u001b[1m231/235\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - accuracy: 0.9540 - loss: 0.1320\n",
      "Epoch 7: val_accuracy improved from 0.91798 to 0.92623, saving model to best_model.keras\n",
      "\u001b[1m235/235\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step - accuracy: 0.9541 - loss: 0.1319 - val_accuracy: 0.9262 - val_loss: 0.2150\n",
      "Epoch 8/20\n",
      "\u001b[1m232/235\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - accuracy: 0.9630 - loss: 0.1069\n",
      "Epoch 8: val_accuracy improved from 0.92623 to 0.95646, saving model to best_model.keras\n",
      "\u001b[1m235/235\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step - accuracy: 0.9630 - loss: 0.1071 - val_accuracy: 0.9565 - val_loss: 0.1370\n",
      "Epoch 9/20\n",
      "\u001b[1m231/235\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - accuracy: 0.9708 - loss: 0.0832\n",
      "Epoch 9: val_accuracy did not improve from 0.95646\n",
      "\u001b[1m235/235\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 5ms/step - accuracy: 0.9707 - loss: 0.0834 - val_accuracy: 0.9370 - val_loss: 0.1873\n",
      "Epoch 10/20\n",
      "\u001b[1m229/235\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - accuracy: 0.9763 - loss: 0.0675\n",
      "Epoch 10: val_accuracy did not improve from 0.95646\n",
      "\u001b[1m235/235\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 5ms/step - accuracy: 0.9762 - loss: 0.0677 - val_accuracy: 0.9506 - val_loss: 0.1458\n",
      "Epoch 11/20\n",
      "\u001b[1m230/235\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - accuracy: 0.9770 - loss: 0.0656\n",
      "Epoch 11: val_accuracy improved from 0.95646 to 0.96045, saving model to best_model.keras\n",
      "\u001b[1m235/235\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step - accuracy: 0.9770 - loss: 0.0655 - val_accuracy: 0.9605 - val_loss: 0.1267\n",
      "Epoch 12/20\n",
      "\u001b[1m229/235\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - accuracy: 0.9826 - loss: 0.0528\n",
      "Epoch 12: val_accuracy improved from 0.96045 to 0.96751, saving model to best_model.keras\n",
      "\u001b[1m235/235\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step - accuracy: 0.9826 - loss: 0.0528 - val_accuracy: 0.9675 - val_loss: 0.1121\n",
      "Epoch 13/20\n",
      "\u001b[1m229/235\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - accuracy: 0.9883 - loss: 0.0347\n",
      "Epoch 13: val_accuracy did not improve from 0.96751\n",
      "\u001b[1m235/235\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 5ms/step - accuracy: 0.9883 - loss: 0.0348 - val_accuracy: 0.9477 - val_loss: 0.1708\n",
      "Epoch 14/20\n",
      "\u001b[1m231/235\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - accuracy: 0.9845 - loss: 0.0459\n",
      "Epoch 14: val_accuracy did not improve from 0.96751\n",
      "\u001b[1m235/235\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 5ms/step - accuracy: 0.9845 - loss: 0.0460 - val_accuracy: 0.9613 - val_loss: 0.1430\n",
      "Epoch 15/20\n",
      "\u001b[1m232/235\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - accuracy: 0.9676 - loss: 0.1006\n",
      "Epoch 15: val_accuracy improved from 0.96751 to 0.96778, saving model to best_model.keras\n",
      "\u001b[1m235/235\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step - accuracy: 0.9678 - loss: 0.0998 - val_accuracy: 0.9678 - val_loss: 0.1385\n",
      "Epoch 16/20\n",
      "\u001b[1m229/235\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - accuracy: 0.9955 - loss: 0.0145\n",
      "Epoch 16: val_accuracy did not improve from 0.96778\n",
      "\u001b[1m235/235\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 5ms/step - accuracy: 0.9954 - loss: 0.0146 - val_accuracy: 0.9611 - val_loss: 0.1842\n",
      "Epoch 17/20\n",
      "\u001b[1m225/235\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - accuracy: 0.9824 - loss: 0.0490\n",
      "Epoch 17: val_accuracy did not improve from 0.96778\n",
      "\u001b[1m235/235\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 5ms/step - accuracy: 0.9822 - loss: 0.0495 - val_accuracy: 0.9603 - val_loss: 0.1599\n",
      "Epoch 18/20\n",
      "\u001b[1m228/235\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - accuracy: 0.9900 - loss: 0.0319\n",
      "Epoch 18: val_accuracy improved from 0.96778 to 0.97417, saving model to best_model.keras\n",
      "\u001b[1m235/235\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step - accuracy: 0.9900 - loss: 0.0317 - val_accuracy: 0.9742 - val_loss: 0.1322\n",
      "Epoch 19/20\n",
      "\u001b[1m227/235\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - accuracy: 0.9979 - loss: 0.0079\n",
      "Epoch 19: val_accuracy improved from 0.97417 to 0.97563, saving model to best_model.keras\n",
      "\u001b[1m235/235\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step - accuracy: 0.9979 - loss: 0.0080 - val_accuracy: 0.9756 - val_loss: 0.1174\n",
      "Epoch 20/20\n",
      "\u001b[1m231/235\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - accuracy: 0.9963 - loss: 0.0122\n",
      "Epoch 20: val_accuracy did not improve from 0.97563\n",
      "\u001b[1m235/235\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 5ms/step - accuracy: 0.9962 - loss: 0.0124 - val_accuracy: 0.9482 - val_loss: 0.2278\n"
     ]
    }
   ],
   "source": [
    "# Training the Model\n",
    "history = model.fit(\n",
    "    X_train, Y_train,\n",
    "    validation_split=0.2,\n",
    "    batch_size=128,\n",
    "    epochs=20,\n",
    "    callbacks=[callback]\n",
    ")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "951f277e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-28T21:37:26.227286Z",
     "iopub.status.busy": "2025-03-28T21:37:26.226967Z",
     "iopub.status.idle": "2025-03-28T21:37:26.599286Z",
     "shell.execute_reply": "2025-03-28T21:37:26.598464Z"
    },
    "id": "2HkTgdHQ98_K",
    "outputId": "ad35e32d-78f7-4cc3-d998-e5f1bfc04243",
    "papermill": {
     "duration": 0.515957,
     "end_time": "2025-03-28T21:37:26.600662",
     "exception": false,
     "start_time": "2025-03-28T21:37:26.084705",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Plot training and validation accuracy\n",
    "plt.plot(history.history['accuracy'], label='Train Accuracy')\n",
    "plt.plot(history.history['val_accuracy'], label='Validation Accuracy')\n",
    "plt.xlabel('Epochs')\n",
    "plt.ylabel('Accuracy')\n",
    "plt.legend()\n",
    "plt.title('Model Accuracy')\n",
    "plt.show()\n",
    "\n",
    "# Plot training and validation loss\n",
    "plt.plot(history.history['loss'], label='Train Loss')\n",
    "plt.plot(history.history['val_loss'], label='Validation Loss')\n",
    "plt.xlabel('Epochs')\n",
    "plt.ylabel('Loss')\n",
    "plt.legend()\n",
    "plt.title('Model Loss')\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "60bc24ca",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-28T21:37:26.896076Z",
     "iopub.status.busy": "2025-03-28T21:37:26.895730Z",
     "iopub.status.idle": "2025-03-28T21:37:28.913062Z",
     "shell.execute_reply": "2025-03-28T21:37:28.912141Z"
    },
    "id": "qUdeFLfn99CX",
    "outputId": "7e1db1b3-5e6b-450c-b6a1-65741484413c",
    "papermill": {
     "duration": 2.161243,
     "end_time": "2025-03-28T21:37:28.914405",
     "exception": false,
     "start_time": "2025-03-28T21:37:26.753162",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m294/294\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 4ms/step - accuracy: 0.9448 - loss: 0.2703\n",
      "Test Loss: 0.2591\n",
      "Test Accuracy: 94.49%\n"
     ]
    }
   ],
   "source": [
    "# Evaluate the model on the test dataset\n",
    "test_loss, test_accuracy = model.evaluate(X_test, Y_test, verbose=1)\n",
    "\n",
    "# Print test results\n",
    "print(f\"Test Loss: {test_loss:.4f}\")\n",
    "print(f\"Test Accuracy: {test_accuracy * 100:.2f}%\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "f35ccf3f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-28T21:37:29.243377Z",
     "iopub.status.busy": "2025-03-28T21:37:29.243051Z",
     "iopub.status.idle": "2025-03-28T21:37:29.246668Z",
     "shell.execute_reply": "2025-03-28T21:37:29.245827Z"
    },
    "id": "TQTHnEPFiQF3",
    "papermill": {
     "duration": 0.150712,
     "end_time": "2025-03-28T21:37:29.248052",
     "exception": false,
     "start_time": "2025-03-28T21:37:29.097340",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Define class names based on the dataset\n",
    "class_names = ['nv', 'mel', 'bkl', 'bcc', 'akiec', 'vasc', 'df']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "05f4a48f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-28T21:37:29.540144Z",
     "iopub.status.busy": "2025-03-28T21:37:29.539806Z",
     "iopub.status.idle": "2025-03-28T21:37:30.921496Z",
     "shell.execute_reply": "2025-03-28T21:37:30.920476Z"
    },
    "id": "1jbG1W7NiF3o",
    "outputId": "b42ff41d-adcf-4411-bbb9-523c444c95aa",
    "papermill": {
     "duration": 1.530024,
     "end_time": "2025-03-28T21:37:30.923043",
     "exception": false,
     "start_time": "2025-03-28T21:37:29.393019",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m294/294\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step\n",
      "Accuracy on Test Set: 94.49%\n",
      "\n",
      "Classification Report:\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "          nv       0.99      0.98      0.98      1359\n",
      "         mel       0.95      0.99      0.97      1318\n",
      "         bkl       0.86      0.98      0.91      1262\n",
      "         bcc       0.99      1.00      0.99      1351\n",
      "       akiec       0.93      0.77      0.84      1374\n",
      "        vasc       1.00      1.00      1.00      1358\n",
      "          df       0.91      0.91      0.91      1365\n",
      "\n",
      "    accuracy                           0.94      9387\n",
      "   macro avg       0.95      0.95      0.94      9387\n",
      "weighted avg       0.95      0.94      0.94      9387\n",
      "\n"
     ]
    }
   ],
   "source": [
    "from sklearn.metrics import classification_report, accuracy_score\n",
    "\n",
    "# Predicting the classes for X_test\n",
    "predictions = model.predict(X_test)\n",
    "predicted_classes = np.argmax(predictions, axis=1)  # Convert probabilities to class indices\n",
    "\n",
    "# Evaluate accuracy\n",
    "accuracy = accuracy_score(Y_test, predicted_classes)\n",
    "print(f'Accuracy on Test Set: {accuracy * 100:.2f}%')\n",
    "\n",
    "# Classification report for detailed metrics\n",
    "print(\"\\nClassification Report:\")\n",
    "print(classification_report(Y_test, predicted_classes, target_names=class_names))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "4963d89a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-28T21:37:31.215953Z",
     "iopub.status.busy": "2025-03-28T21:37:31.215607Z",
     "iopub.status.idle": "2025-03-28T21:37:32.293548Z",
     "shell.execute_reply": "2025-03-28T21:37:32.292708Z"
    },
    "id": "CUGizW9_i10_",
    "outputId": "675fd073-0a83-428b-ecee-53600ca3385e",
    "papermill": {
     "duration": 1.223152,
     "end_time": "2025-03-28T21:37:32.295018",
     "exception": false,
     "start_time": "2025-03-28T21:37:31.071866",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m294/294\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1ms/step\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay\n",
    "\n",
    "# Generate predictions for the test set\n",
    "predictions = model.predict(X_test)\n",
    "predicted_classes = np.argmax(predictions, axis=1)\n",
    "\n",
    "# Generate the confusion matrix\n",
    "conf_matrix = confusion_matrix(Y_test, predicted_classes)\n",
    "\n",
    "# Display the confusion matrix\n",
    "disp = ConfusionMatrixDisplay(confusion_matrix=conf_matrix, display_labels=class_names)\n",
    "disp.plot(cmap='viridis', xticks_rotation='vertical')  # Rotate x-axis labels for better readability\n",
    "plt.title(\"Confusion Matrix\")\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "2e6750d6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-28T21:37:32.594552Z",
     "iopub.status.busy": "2025-03-28T21:37:32.594269Z",
     "iopub.status.idle": "2025-03-28T21:37:33.054037Z",
     "shell.execute_reply": "2025-03-28T21:37:33.053095Z"
    },
    "id": "B8jj853QiqHO",
    "outputId": "dd7c2169-81ee-4428-8511-df017cb960ae",
    "papermill": {
     "duration": 0.609559,
     "end_time": "2025-03-28T21:37:33.055583",
     "exception": false,
     "start_time": "2025-03-28T21:37:32.446024",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1200x600 with 9 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Visualize some test images with predictions\n",
    "plt.figure(figsize=(12, 6))\n",
    "for i in range(9):\n",
    "    plt.subplot(3, 3, i + 1)\n",
    "    plt.imshow(X_test[i])\n",
    "    plt.title(f\"True: {class_names[Y_test[i]]}\\nPred: {class_names[predicted_classes[i]]}\")\n",
    "    plt.axis('off')\n",
    "plt.tight_layout()\n",
    "plt.show()\n"
   ]
  }
 ],
 "metadata": {
  "accelerator": "GPU",
  "colab": {
   "gpuType": "T4",
   "provenance": []
  },
  "kaggle": {
   "accelerator": "nvidiaTeslaT4",
   "dataSources": [
    {
     "datasetId": 6387911,
     "sourceId": 10317948,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 54339,
     "sourceId": 104884,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30918,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.12"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 865.718696,
   "end_time": "2025-03-28T21:37:37.362466",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-03-28T21:23:11.643770",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
